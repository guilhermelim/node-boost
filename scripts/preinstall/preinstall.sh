#!/bin/bash

# Defini√ß√£o de cores
RESET="\033[0m"
BLUE="\033[1;34m"   # Azul
GREEN="\033[1;32m"  # Verde
YELLOW="\033[1;33m" # Amarelo
RED="\033[1;31m"    # Vermelho
PURPLE="\033[1;35m" # Roxo para debug

# Defini√ß√£o de emojis
INFO_EMOJI=""
SUCCESS_EMOJI="‚úî  "
WARN_EMOJI="‚ö†Ô∏è "
ERROR_EMOJI="‚úò  "
DEBUG_EMOJI="üêõ "

# Fun√ß√£o log
log() {
  local level=$1
  local message=$2

  # Usando um switch-like para definir a cor e emoji de acordo com o n√≠vel
  case $level in
  info)
    color=$BLUE
    emoji=$INFO_EMOJI
    ;;
  success)
    color=$GREEN
    emoji=$SUCCESS_EMOJI
    ;;
  warn)
    color=$YELLOW
    emoji=$WARN_EMOJI
    ;;
  error)
    color=$RED
    emoji=$ERROR_EMOJI
    ;;
  debug)
    color=$PURPLE
    emoji=$DEBUG_EMOJI
    ;;
  *)
    color=$RESET # Default para 'info'
    emoji=$INFO_EMOJI
    ;;
  esac

  # Exibe a mensagem colorida com o emoji prefixado
  echo -e "${color}${emoji}$message$RESET"
}

# Exemplos de uso
# log "info" "Iniciando o processo de instala√ß√£o do pacote X."
# log "success" "O pacote X foi instalado com sucesso!"
# log "warn" "A vers√£o atual do pacote Y pode estar *desatualizada*."
# log "error" "Falha ao instalar o pacote Z."
# log "debug" "Essa √© uma mensagem gen√©rica de debugging."
# log "undefined" "Essa mensagem deve aparecer como info, pois 'undefined' n√£o est√° definido."

# Vari√°vel global para armazenar o estado da verifica√ß√£o
APT_UPDATED=false

# Fun√ß√£o para verificar pacotes do sistema, usando vari√°vel global
check_system_packages() {
  if [ "$APT_UPDATED" = false ]; then
    log "info" "üîç Verificando pacotes do sistema..."
    sudo apt update -y
    echo -e "\n"
    APT_UPDATED=true
  fi
}

# Fun√ß√£o para instalar ou atualizar pacotes essenciais
install_package() {
  PACKAGE=$1

  # Chama a fun√ß√£o de verifica√ß√£o de pacotes
  check_system_packages

  log "info" "üì¶ Verificando se o pacote \`$PACKAGE\` est√° instalado ou se precisa ser atualizado."

  # Verifica se o pacote est√° instalado
  if dpkg -l | grep -q $PACKAGE; then
    # Se o pacote est√° instalado, verifica a vers√£o
    INSTALLED_VERSION=$(dpkg-query -W -f='${Version}' $PACKAGE)
    # log "info" "üîß $PACKAGE j√° est√° instalado. Verificando atualiza√ß√µes..."

    # Atualiza o pacote se necess√°rio
    sudo apt install --only-upgrade $PACKAGE -y >/dev/null 2>&1

    # Verifica a vers√£o ap√≥s a atualiza√ß√£o
    UPDATED_VERSION=$(dpkg-query -W -f='${Version}' $PACKAGE)

    # Se a vers√£o foi atualizada, exibe o sucesso
    if [ "$INSTALLED_VERSION" != "$UPDATED_VERSION" ]; then
      log "success" "$PACKAGE atualizado para a vers√£o $UPDATED_VERSION!"
    else
      log "success" "Voc√™ j√° est√° usando a vers√£o mais recente do $PACKAGE ($INSTALLED_VERSION).\n"
    fi
  else
    # Se o pacote n√£o est√° instalado, instala-o
    log "info" "üö® $PACKAGE n√£o encontrado. Instalando..."
    sudo apt install $PACKAGE -y >/dev/null 2>&1 && log "success" "$PACKAGE instalado com sucesso\n" || log "error" "Falha na instala√ß√£o de $PACKAGE\n"
  fi
}

# Fun√ß√£o para instalar o NVM (Node Version Manager)
install_nvm() {
  log "info" "üì¶ Verificando o pacote \`NVM\` para instala√ß√£o ou atualiza√ß√£o..."

  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash

  # Carrega o NVM para a sess√£o atual
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # Isso carrega o NVM
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # Isso carrega o autocomplete do NVM

  log "success" "NVM instalado com sucesso!"
}

# Fun√ß√£o para instalar ou atualizar o NVM
install_or_update_nvm() {
  log "info" "üì¶ Verificando o \`NVM\` para instala√ß√£o ou atualiza√ß√£o..."

  LATEST_VERSION=$(curl -s https://api.github.com/repos/nvm-sh/nvm/releases/latest | grep '"tag_name"' | sed 's/.*"tag_name": "\(.*\)",/\1/')
  LATEST_VERSION=${LATEST_VERSION#v} # Remove o 'v' da vers√£o

  # Carrega o NVM para garantir que podemos verificar a vers√£o
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # Isso carrega o NVM

  # Se o NVM n√£o estiver instalado, chama a fun√ß√£o para instal√°-lo
  if ! command -v nvm &>/dev/null; then
    install_nvm
  else
    INSTALLED_VERSION=$(nvm -v)
    # Se a vers√£o instalada n√£o for a mais recente, atualiza o NVM
    if [ "$INSTALLED_VERSION" != "$LATEST_VERSION" ]; then
      log "info" "üîß Atualizando o NVM..."
      install_nvm
      log "success" "NVM atualizado para a vers√£o $LATEST_VERSION!\n"
    else
      log "success" "Voc√™ j√° est√° usando a vers√£o mais recente do NVM ($INSTALLED_VERSION).\n"
    fi
  fi
}

# Fun√ß√£o para atualizar o NPM
update_npm() {
  log "info" "üì¶ Verificando o NPM para instala√ß√£o ou atualiza√ß√£o..."

  # Verifica a vers√£o instalada do NPM
  INSTALLED_VERSION=$(npm -v)

  # Obt√©m a vers√£o mais recente do NPM
  LATEST_VERSION=$(npm show npm version)

  # Compara as vers√µes
  if [ "$INSTALLED_VERSION" != "$LATEST_VERSION" ]; then
    log "info" "üîß Atualizando o NPM..."
    npm install --global npm@latest || log "error" "Falha na atualiza√ß√£o do NPM"
    log "success" "NPM atualizado para a vers√£o $LATEST_VERSION!\n"
  else
    log "success" "Voc√™ j√° est√° usando a vers√£o mais recente do NPM ($INSTALLED_VERSION).\n"
  fi
}

# Fun√ß√£o principal
main() {
  install_package "build-essential"
  install_package "curl"
  install_package "wget"
  install_package "git"

  install_or_update_nvm

  update_npm

  log "success" "Instala√ß√£o e configura√ß√£o de depend√™ncias do projeto conclu√≠das com sucesso."
}

# Executa a fun√ß√£o principal
main
